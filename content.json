[{"title":"Kotlin学习笔记一","date":"2017-05-18T15:23:12.000Z","path":"2017/05/18/Kotlin学习笔记一/","text":"今天的Google开发者大会除了宣布Google的战略重点从移动端转移到AI领域外，另一向重点就是钦定了Kotlin为以后Android开发的第一语言。 Kotlin的大名我是早有耳闻，但是一直懒没有去学，而且当时Kotlin目前也仍处于发展中。如今有了Google的鼎力支持，再加上我最近颓废至极也该找点事做，于是去搜集了Kotlin的开发资料开始学习。 我使用的学习资料是不知谁翻译的Kotlin官方文档中文版。第一步当然是从语法开始。但是如果你也是为了Android应用开发（目前Kotlin的主要应用领域），那么也许你也熟悉了Java语言，学习Kotlin就十分轻松了，我只记录下自己认为的重点。- Kotlin基本语法 不需要;作为句末 var与val的区别：Kotlin中所有的变量首先都是声明为val或者var，再赋值，若不赋值再指定类型。val为只读类型，var为可读写 1234567val a = 1 // 直接赋值Kotlin会识别数据类型var b : Int //Int首字母大写；指定b的数据类型为inta = 2 //运行出错，a值不可变b = 1b = 2 //修改b的值正常运行 when的特殊使用 1234567val a = 1when(a)&#123; 1 -&gt; println(\"a == 1\") is Int -&gt; println(\"a is int\") else -&gt; println(\"unkown\") &#125;//输出为 “a == 1” 上面这段代码可以看出when替代了java中switch的作用，但是需要注意的一点是这里没有break，虽然a既等于1又是int但是输出判断出第一个条件正确后立即跳出，不会再继续向下判断。 几种区间比较:Kotlin中有几种表示范围的方法 123456for(i in 1..10)&#123;...&#125; //这种情况下循环中i会取1到10for(i in 10..1)&#123;...&#125; //直接结束循环for(i in 1..10 step 4)&#123;...&#125; //i = 1,5,9for(i in 10 downTo 1)&#123;...&#125; //i取10到1for(i in 10 downTo 1 step 4) //i = 10,6,2for(i in 1 until 10)&#123;...&#125; //i取1到9 break与continue的使用：除了在Java中的普通用法，Kotlin还支持基于标签的用法 12345678910111213141516a@ for(i in 1..3) //标签为任意字符串+@ 如：loop@、abc@等 b@ for(j in 1..3)&#123; println(\"$i + $j\") if(i==2) continue@a //注意这里continue与@之间无空格，执行后结束本次循环，进行下一次 else if(j==2) break@b //break与@之间也不需要空格，执行后直接结束循环，执行后面的代码 &#125;/**1 + 1*1 + 2*2 + 1*3 + 1*3 + 2*/ 关于其他内容文档里面写得很仔细，我就不再赘述，这里是看文档时不太明白的地方通过编程测试后得出的结果。 - ###类与继承 类的主构造函数直接跟在类名之后 123456789/**你在Java里面这样写*class Person&#123;* Person(String firstName)&#123;&#125;*&#125;*但是在Kotlin中你可以这样写*/class Person constructor(firstName: String)&#123;&#125; //标准写法class Person(firstName: String)&#123;&#125; //当主构造函数没有可见修饰符及注解时可省略 constructor 关键字class Person(firstName: Sring) //当类没有类体可省略花括号 主构造函数不能有代码，初始化操作要放入init代码块中 123456789101112class Person(String name)&#123; val personName = name //也可以直接使用 init()&#123; println(\"name is $name\") &#125;&#125;class Person(val personName: String)&#123; //直接初始化属性 init()&#123; println(\"name is $name\") &#125;&#125; 创建类的实例不需要new关键字(Kotlin没有new关键字): 1val p = Person(\"ming\") 默认情况下，Kotlin中所有类默认均为final，只有声明了open才可以被继承 12open class Person(p : Int)class Man(p : Int):Person(p) 类方法同样如此，只有标注了open才能被覆盖，并且除了覆盖，不能有与父类相同签名的函数 1234567open class Base &#123; open fun v() &#123;&#125; fun nv() &#123;&#125;&#125;class Derived() : Base() &#123; final override fun v() &#123;&#125; //override默认方法可以被子类覆盖，可加final标注禁止子类覆盖&#125; 属性覆盖与方法相似，但var可覆盖val，反之却不行 当父类与实现的接口有函数重名时的情况文档中写得很清楚。我突然想到Java中似乎没遇到类似的情况，首先应该是这种在设计上是不合理的，一般我们在编程时特意回避了。我测试了一下在Java中当类与接口函数重名时，子类仍然只能有一个该名称函数，并且必需是重写父类的，调用时无论转型为父类还是接口均是以该函数为准。若子类不重写该方法，则接口自动调用父类该方法。 123456789101112131415161718192021222324252627282930class A&#123; public void print()&#123; System.out.println(\"A\"); &#125;&#125;interface B&#123; void print();&#125;class C extends A implements B&#123; @Override //必须加上override注解 public void print() &#123; super.print(); System.out.println(\"C\"); &#125;&#125;public static void main(String args)&#123; A a = new C(); a.print(); B b = new C(); b.print();&#125;/*输出均为：A* C*若不重写print方法，则输出均为:A*/ 但是当重名函数返回类型不同时，编辑器会报错。 abstract修饰的类和成员不用标注open Kotlin中没有静态方法。","tags":[{"name":"Kotlin","slug":"Kotlin","permalink":"http://yoursite.com/tags/Kotlin/"}]},{"title":"Android Studio更新后无法debug解决","date":"2017-05-17T04:02:17.000Z","path":"2017/05/17/Android-Studio更新后无法debug解决/","text":"之前更新AS后遇到一个问题就是本来正常的项目突然在运行后无法自动调起界面了，我使用真机通过数据线连接到AS调试项目，点击运行后apk被正确安装到了手机上，但是没有在AS引导下自动打开app，并且debug也失败，无法调起debug界面。查了很多资料也没个结果，当时以为是AS新版本的问题，毕竟AS从1.5升级到2.0步子也挺大的，后来问学长却发现他没有遇到这个问题，依然跑得飞起。。。最后是一个已经工作的大神指导，让我升级Gradle版本试试，果然升级之后就OK了，这里记录一下升级过程。 直接右键点击app文件夹，打开Project Structure，或者通过File-&gt;Project Structure打开， 进入到Project栏，在这里修改Gradle和Android Plugin Version的版本，Android Plugin Version是Gradle插件版本号，这个也可以去build.gradle文件中直接修改。两者之间存在着对应关系，不能随便设置的，对应关系可以直接到官方用户指南去查看 自从AS2.0版本以后经常在更新了AS之后打开项目时提示一个更新INSTANT RUN的通知，这个我每次都没看清就点确定了，今天更新的时候才注意到更新的通知栏其实就提示了建议用户将Gradle升级3.3及插件2.3.2版本，要是更新前仔细看也就不会那么痛苦地debug好几天了吧。。。","tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"},{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"},{"name":"Android Studio","slug":"Android-Studio","permalink":"http://yoursite.com/tags/Android-Studio/"}]},{"title":"hexo+yilia主题使用微博评论箱","date":"2017-05-16T09:11:11.000Z","path":"2017/05/16/hexo-yillia主题使用微博评论箱/","text":"昨天新搭好博客之后就一直想要添加一个留言版方便和大家交流（虽然跟没有人），我使用的是litten大神的yilia主题，里面本身就帮助我们添加了畅言、多说、网易云跟帖、Disqus四种评论系统，我们只需要修改主题根目录下的_config.yml文件，配置appid就可以使用了，非常方便。 但是。。。我的环境是gitpage+hexo，并且没有自己的域名，而畅言需要域名的备案号，无法申请；网易云跟帖判断github.io url已存在，无法申请；多说将在6月关闭，不推荐使用；Disqus在墙内使用不方便，不推荐使用。。。于是我只能另谋出路。经过多方搜索，我发现友言和微博评论箱两个选择不错，于是开始添加，先说说友言的配置吧。 友言踩坑其实友言没什么好坑的，直接注册后都不用邮箱认证就能自动分配到uid，然后获取到代码直接插入到界面中就可以了（不会修改主题代码的可以参考下面微博插入代码的方法）。但是我插入之后无论是本地测试还是更新到gitpage上测试都没有出现评论框，场面异常尴尬，查了很多资料也没有个解释，于是保留了代码并且给客服反馈了，等有了解决方案再来更新。 微博评论箱接入然后讲讲微博评论箱的接入。首先是去新浪微博开放平台申请个帐号（当然直接微博登录也是可以的）。接着创建网站： 这里填入网站名称和域名可以是gitpage的地址，例如:小明的博客；djming.github.io。 验证方式我选择了第一种：在首页添加标签。首先复制上面这段代码，然后找到主页所在的页面，由于我之前没有接触过这类开发，查了很久文档才找到:我们就是要修改这个head.ejs文件，这里面包含了我们博客页面的&lt;head&gt;标签内容，hexo-theme-yilia是我的主题文件夹名，如果用的不是这个主题可以自行去找，根据hexo官方文档的规则，主题目录应该是大致相同的。在这里随便找个地方把&lt;meta&gt;标签插进去就行了，然后执行hexo d把我们的项目更新到gitpage，访问自己博客确认头信息已经被修改接着就点击验证并添加进入了漫长的等待，不知是不是微博的服务器访问gitpage特别慢，这个过程我去查询了解决友言问题的各种资料，还顺便出去给朋友送了个东西，回来看见页面还卡在这，一刷新提示网站名称已存在才明白已经创建成功了，现在进入我的应用就可以看见自己刚才申请的网站啦！ 接下来我们回到评论箱API网站可以看到这里已经和我们第一次进来不同了，需要注意的是在这个页面的第一步第二部中配置的不同会直接导致第三步复制代码框中产生的代码不同，因为评论框的样式都被写在了WBML中，第三步复制代码需要增加XML命名空间，这里依然进入我们刚才编辑的head.ejs，将&lt;html&gt;标签修改为&lt;html xmlns:wb=&quot;http://open.weibo.com/wb&quot;&gt;，并且在head中添加&lt;script src=&quot;http://tjs.sjs.sinajs.cn/open/api/js/wb.js?appkey=你的appkey&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;，最后就是将评论箱的代码复制到评论箱应该出现的地方了，在我使用yilia主题中，我直接写进了/theme/yilia/layout/_partial/article.ejs的末尾，然后执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo server查看效果。 其实可以在hexo服务运行时修改配置文件以及.md文件，再刷新页面就可以看到效果了，不需要每次clean再重启。 总结一下申请评论箱的坑： 验证过程太慢，不过是能够申请成功的，你可以喝杯咖啡。 我选择留言框的样式是不显示边框，但是实际效果还是显示了，我的解决方法是将最后需要部署WBML修改为&lt;wb:comments url=&quot;auto&quot; border=&quot;n&quot; brandline=&quot;n&quot; fontsize=&quot;12&quot; width=&quot;auto&quot; appkey=&quot;你的APPKEY&quot; &gt;&lt;/wb:comments&gt;也就是添加了border=&quot;n&quot; 身份验证和审核有点麻烦，需要身份证扫描照。 最后要说的是新浪的评论箱需要进行用户身份认证后再上线，其实也比畅言的好不了多少，不过对于没有域名也不打算买的小伙伴可以尝试一下，希望友言的问题能够尽快解决，如果你知道什么好的留言系统也请告诉我哟~ 写完以上文字后我才想起有个叫做来必力（来♂比利）的评论系统忘记了，于是去测试了一下。。。异常简单，注册完成后插入代码到页面就行了，而且有个人免费，用户可以不登录留言。。。请忘了我上面写的东西吧。。。","tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"yilia","slug":"yilia","permalink":"http://yoursite.com/tags/yilia/"},{"name":"评论系统","slug":"评论系统","permalink":"http://yoursite.com/tags/评论系统/"}]},{"title":"hexo+gitpage搭建过程遇到的坑","date":"2017-05-15T10:13:36.000Z","path":"2017/05/15/hexo+gitpage搭建遇到的坑/","text":"今天在看一篇某大神写得技术文章时萌生了自己搭建一个博客的想法，于是在大神博客的底部发现了使用的框架以及主题。 hexo的安装搭建很简单，官方文档很全面而且也有中文版，网上也有不少文章，这里给上链接不再赘述:官方中文文档和大神的超全面教程。 我就谈谈作为一个没接触过这类框架的小白在搭建过程中遇到的坑。 hexo如何发布到gitpage我在搭建hexo的过程中最大的疑惑就是如何把hexo搭到gitpage上？我自己是以为创建好repository后需要clone到本地进行搭建再push上服务器。其实不必这么麻烦，hexo会解决上传的问题。所以我们可以通过hexo init &lt;floder&gt;命令把项目创建在自己喜欢的目录名中。hexo d命令会根据你在_config.yml中deploy项下配置的repository的地址将项目push上去，当然前提是你已经配置好了本地了git命令。所以不用再纠结hexo init到底在哪个目录执行，怎么去上传这类的问题。 Cannot Get /在执行了hexo server没有报错情况下访问localhost:4000可能会看到这个错误页面，导致这种问题可能是两种情况： 没有执行npm install命令。 _post/目录下没有文件. 使用hexo init命令创建好项目后应该进入目录执行npm install，这个只要跟着文档中就不会有错。坑爹的是第二种情况。由于创建的项目中会有一篇默认文章来引导小白，删除这篇文章对应的.md文件后_post也就成为了空目录，这种情况同样会导致错误页面出现，所以一定要保证每个目录下都有文章撑着，特别是_post目录。 Markdown文档解析错误这个问题是在要发布的时候才发现的。。。在预览的网页中许多标题前的###等符号未被识别以及一些其他问题，这个似乎和主题也有关，并不是所以人都会遇到。解决方法就是在###与文字标题之间加一个空格而非我们普通地连写，其实这也是markdown的规范，只怪我学艺不精。 以上就是我在配置hexo时的一点心得，总体来说hexo这个框架真的很简单，各种主题也还蛮好看的，我也还在摸索当中，第一次写markdown文档排版太丑请原谅。","tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"gitpage","slug":"gitpage","permalink":"http://yoursite.com/tags/gitpage/"}]}]